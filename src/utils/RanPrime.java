package utils;

import java.util.*;

/**
 * This class is for generating a randome prime number
 * @author kc
 */
public class RanPrime {
  
	private static final int SIZE = 32;
	private final Random r = new Random();
	
	private final String[] trace;
	private boolean hasTrace;
	private int p;
	private String tmpt1;
	
	public RanPrime() {
	  hasTrace = false;
	  trace = new String[3];
		p = genPrime();
		tmpt1 = "";
	}
	
	/**
	 * Generates a 7-bit number. 
	 * The 1st bit is always 1, and the 2nd to 6th bits are generated by extracting the least 
	 * significant big from a random number.
	 * @return a random 7-bit number
	 */
	public int genNum() {
		int x = 0;
		int b = 0;
		String s = "";
		
		x = 1;
		s = "Bit 0: set as 1\n";
		
		for (int i = 1; i <= 5; i++) {
			int tmp = Math.abs(r.nextInt());
			b = tmp % 2;
			x += b << i;
			s += "Bit " + i + ": number " + getBinary(tmp) + " extracts " + b + "\n";
   	}
		
		x += 1 << 6;
		s += "Bit 6: set as 1\n";
		s = "Trace for " + x + " (" + getBinary(x) + "):\n" + s;
		
		trace[0] = s;
		
		return x;
	}
	
	/**
	 * Converts decimal to a 4-byte binary
	 * @param x original decimal
	 * @return 4-byte binary
	 */
	public String getBinary(int x) {
	  final StringBuilder sb = new StringBuilder();
	  sb.append(Integer.toBinaryString(x));
	  int len = sb.length();
		
		for (int i = 0; i <= SIZE - len; i++) {
		  sb.insert(0, "0");
		}
		
		return sb.toString();
	}
	
	private boolean MillerRabin(int a, int x) {
		trace[1] = "Trace: n = " + x + ", a = " + a + "\n";
		int n = x - 1;
		int y = 1; 
		int z = 0;
		int k = 0;
		for (int i = 1; n >> i != 0; i++)
			k = i;
		
		for (int i = k; i >= 0; i--) {
			z = y;
			y = (y * y) % x;
			trace[1] += String.format("i=%d, x=%d, z=%3d, y1=%3d, ", i, (n>>i)%2, z, y);
			
			if (y == 1 && z != 1 && z != x - 1) {
				trace[1] += String.format("y2=%3d\n", y);
				return false;
			}
				
			if ((n >> i) % 2 == 1) {
			  y = (y * a) % x;
			}
			trace[1] += String.format("y2=%3d\n", y);
		}
		
		return y == 1;
	}
	
	/**
	 * Test primality of an integer
	 * @param x decimal
	 * @return true if x is prime
	 */
	public boolean isPrime(int x) {
		
		String s = "";
		Integer a = null;
		HashSet<Integer> aset = new HashSet<Integer>();
		
		for (int i = 0; i < 20; i++) {
			do {
				a = Math.abs(r.nextInt()) % (x - 1) + 1;
			} while (aset.contains(a));
			aset.add(a);
			
			if (!MillerRabin(a,x)) {
				s = x + " is not a prime because " + a + "^" + x + " mod " + x + " != 1\n";
				tmpt1 = s + trace[1];
				trace[1] = s + trace[1];
				hasTrace = true;
				return false;
			}
		}

		s = x + " is perhaps a prime\n";
		trace[2] = s + trace[1];
		
		trace[1] = tmpt1;
		return true;
	}
	
	/**
	 * Generates a random prime number
	 * @return a random prime integer
	 */
	public int genPrime() {
		int x;
		
		do {
			x = genNum();
		} while (!isPrime(x));
		
		return x;
	}
	
	public int getP() {
		return p;
	}
	
	/**
	 * Returns traces according to project documents
	 * @return
	 */
	public String[] getTrace() {
		String[] lines = {"line 106\n", "line 122\n", "line 126\n"};
		for(int i = 0; i <= 2; i++)
			trace[i] = lines[i] + trace[i] + "\n";
		
		return trace;
	}
	
	public boolean haveTrace() {
		return hasTrace;
	}
}
